service: crud-serverless-users

provider:
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:us-east-1:747383222539:table/usersTable
        - Effect: Allow
          Action: 's3:*'
          Resource: arn:aws:s3:::bucket-serverless-course-007/*
  environment:
    BUCKET: bucket-serverless-course-007

plugins:
  - serverless-offline	
  - serverless-dynamodb-local

# Para ahorra espacio a la hora de desplegar en la nube
package: 
  individually: true
  patterns:
    - "!.dynamodb"
    - "!node_modules"
  
# Creados por la comunidad
custom:
  dynamodb:
  # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
        BucketName: bucket-serverless-course-007
    SampleBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Action:
                - 's3:GetObject'
              Resource: !Join [ '', [ 'arn:aws:s3:::', !Ref S3Bucket, '/*' ] ]
              Principal: '*'

functions:
  get-user:
    handler: GetUsers/handler.getUsers
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true #validamos que si o si el request tenga un id
  create-user:
    handler: createUsers/handler.createUsers
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-user:
    handler: updateUsers/handler.updateUsers
    events:
      - http:
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true #validamos que si o si el request tenga un id
            schemas:
              application/json: ${file(schemas/user-schema.json)}         
  delete-user:
    handler: deleteUsers/handler.deleteUsers
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true #validamos que si o si el request tenga un id
  signedURL:
      handler: FirmaUrl/handler.signedS3URL
      events:
        - http:
            path: signedurl
            method: GET
            request:
              querystrings:
                fileName: true

